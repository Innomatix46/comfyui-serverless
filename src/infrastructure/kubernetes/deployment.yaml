apiVersion: apps/v1
kind: Deployment
metadata:
  name: comfyui-api
  namespace: comfyui-serverless
  labels:
    app: comfyui-api
    component: api-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: comfyui-api
      component: api-server
  template:
    metadata:
      labels:
        app: comfyui-api
        component: api-server
    spec:
      containers:
      - name: api-server
        image: comfyui-serverless:latest
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: REDIS_URL
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: CELERY_BROKER_URL
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: SECRET_KEY
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_S3_BUCKET
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: AWS_S3_BUCKET
        envFrom:
        - configMapRef:
            name: comfyui-config
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
            nvidia.com/gpu: 1
        volumeMounts:
        - name: models-volume
          mountPath: /opt/ComfyUI/models
        - name: output-volume
          mountPath: /opt/ComfyUI/output
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: models-volume
        persistentVolumeClaim:
          claimName: models-pvc
      - name: output-volume
        persistentVolumeClaim:
          claimName: output-pvc
      nodeSelector:
        gpu: "true"
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: comfyui-serverless
  labels:
    app: celery-worker
    component: worker
spec:
  replicas: 3
  selector:
    matchLabels:
      app: celery-worker
      component: worker
  template:
    metadata:
      labels:
        app: celery-worker
        component: worker
    spec:
      containers:
      - name: worker
        image: comfyui-serverless:latest
        command: ["celery", "-A", "src.services.workflow.celery_app", "worker", "--loglevel=info", "--concurrency=2"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: REDIS_URL
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: CELERY_BROKER_URL
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_S3_BUCKET
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: AWS_S3_BUCKET
        envFrom:
        - configMapRef:
            name: comfyui-config
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
          limits:
            memory: "16Gi"
            cpu: "8000m"
            nvidia.com/gpu: 1
        volumeMounts:
        - name: models-volume
          mountPath: /opt/ComfyUI/models
        - name: output-volume
          mountPath: /opt/ComfyUI/output
      volumes:
      - name: models-volume
        persistentVolumeClaim:
          claimName: models-pvc
      - name: output-volume
        persistentVolumeClaim:
          claimName: output-pvc
      nodeSelector:
        gpu: "true"
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat
  namespace: comfyui-serverless
  labels:
    app: celery-beat
    component: scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: celery-beat
      component: scheduler
  template:
    metadata:
      labels:
        app: celery-beat
        component: scheduler
    spec:
      containers:
      - name: scheduler
        image: comfyui-serverless:latest
        command: ["celery", "-A", "src.services.workflow.celery_app", "beat", "--loglevel=info"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: REDIS_URL
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: comfyui-secrets
              key: CELERY_BROKER_URL
        envFrom:
        - configMapRef:
            name: comfyui-config
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"