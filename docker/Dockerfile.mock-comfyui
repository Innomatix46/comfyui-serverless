# Mock ComfyUI server for testing
FROM python:3.11-slim

# Install dependencies
RUN pip install fastapi uvicorn python-multipart

WORKDIR /app

# Create mock ComfyUI server
RUN cat > mock_comfyui.py << 'EOF'
"""Mock ComfyUI server for testing."""
import json
import time
import uuid
from datetime import datetime
from typing import Dict, Any

from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse

app = FastAPI(title="Mock ComfyUI Server")

# Mock state
mock_executions = {}
mock_queue = []

@app.get("/health")
async def health_check():
    """Health check endpoint."""
    return {"status": "ok", "version": "mock-1.0.0"}

@app.post("/prompt")
async def submit_prompt(prompt_data: Dict[str, Any]):
    """Submit workflow prompt."""
    prompt_id = str(uuid.uuid4())
    number = len(mock_executions) + 1
    
    # Simulate validation
    if not prompt_data.get("prompt", {}).get("1"):
        return {
            "node_errors": {
                "1": {
                    "errors": [{"message": "Missing required node", "type": "validation_error"}],
                    "dependent_outputs": []
                }
            }
        }
    
    # Add to mock execution tracking
    mock_executions[prompt_id] = {
        "status": "pending",
        "created_at": datetime.utcnow(),
        "prompt_data": prompt_data
    }
    
    # Add to queue
    mock_queue.append({
        "prompt_id": prompt_id,
        "number": number,
        "execution_id": prompt_data.get("extra_data", {}).get("execution_id", prompt_id)
    })
    
    return {
        "prompt_id": prompt_id,
        "number": number,
        "node_errors": {}
    }

@app.get("/history")
async def get_history():
    """Get execution history."""
    history = {}
    
    for prompt_id, execution in mock_executions.items():
        # Simulate completion after 2 seconds
        age = (datetime.utcnow() - execution["created_at"]).total_seconds()
        
        if age > 2:
            status = {
                "status_str": "success",
                "completed": True
            }
            outputs = {
                "1": {
                    "images": [
                        {
                            "filename": f"mock_output_{prompt_id[:8]}.png",
                            "subfolder": "",
                            "type": "output"
                        }
                    ]
                }
            }
        else:
            status = {
                "status_str": "running" if age > 1 else "pending", 
                "completed": False
            }
            outputs = {}
        
        history[prompt_id] = {
            "status": status,
            "outputs": outputs
        }
    
    return history

@app.get("/history/{prompt_id}")
async def get_execution_history(prompt_id: str):
    """Get specific execution history."""
    if prompt_id not in mock_executions:
        raise HTTPException(status_code=404, detail="Execution not found")
    
    execution = mock_executions[prompt_id]
    age = (datetime.utcnow() - execution["created_at"]).total_seconds()
    
    if age > 2:
        return {
            "status": {"status_str": "success", "completed": True},
            "outputs": {
                "1": {
                    "images": [{"filename": f"mock_output_{prompt_id[:8]}.png", "type": "output"}]
                }
            }
        }
    else:
        return {
            "status": {"status_str": "running" if age > 1 else "pending", "completed": False},
            "outputs": {}
        }

@app.post("/interrupt")
async def interrupt_execution(data: Dict[str, Any]):
    """Cancel execution."""
    execution_id = data.get("execution_id")
    
    # Find and cancel execution
    for prompt_id, execution in mock_executions.items():
        if execution.get("execution_id") == execution_id:
            execution["status"] = "cancelled"
            return {"success": True}
    
    return {"success": False, "message": "Execution not found"}

@app.get("/queue")
async def get_queue_status():
    """Get queue status."""
    return {
        "exec_info": {
            "queue_remaining": len([q for q in mock_queue if mock_executions.get(q["prompt_id"], {}).get("status") == "pending"]),
            "queue_pending": [[q["prompt_id"], {"execution_id": q["execution_id"]}] for q in mock_queue[-5:]]
        }
    }

@app.get("/system_stats")
async def get_system_stats():
    """Get system statistics."""
    return {
        "system": {
            "ram": {
                "total": 32000,
                "used": 8000,
                "available": 24000
            },
            "vram": {
                "total": 24000,
                "used": 6000,
                "available": 18000
            }
        },
        "devices": [
            {
                "name": "cuda:0",
                "type": "gpu",
                "memory_total": 24000,
                "memory_used": 6000,
                "utilization": 25
            }
        ]
    }

@app.get("/view")
async def view_output(filename: str):
    """Download output file."""
    # Return mock image data
    return b"mock image data for " + filename.encode()

@app.post("/upload/image")
async def upload_image():
    """Upload image."""
    return {"name": "uploaded_image.jpg", "subfolder": "", "type": "input"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8188)
EOF

# Set executable permissions and run
EXPOSE 8188
CMD ["python", "mock_comfyui.py"]